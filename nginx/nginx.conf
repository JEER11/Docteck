worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events { worker_connections 10240; }

http {
  include       /etc/nginx/mime.types;
  include       /etc/nginx/conf.d/*.conf;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;
  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;
  keepalive_timeout  65;
  types_hash_max_size 4096;
  gzip on;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
  gzip_min_length 1024;

  upstream flask_upstream {
    server flask-service:5000;
    keepalive 64;
  }
  upstream node_upstream {
    server node-backend:3001;
    keepalive 64;
  }

  server {
    listen 80;
    server_name _;
    client_max_body_size 25m;

    # Basic security headers (adjust as needed). For full protection, prefer enabling TLS (443) and HSTS there.
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Permissions-Policy "geolocation=(), camera=(), microphone=(), payment=()" always;
    # CSP (Report-Only) with explicit allowlist based on app usage. Review CSP reports, then enforce.
    add_header Content-Security-Policy-Report-Only "\
      default-src 'self'; \
      img-src 'self' data: blob: https:; \
      media-src 'self' data: blob: https:; \
      style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://fonts.googleapis.com; \
      font-src 'self' data: https://cdn.jsdelivr.net https://fonts.gstatic.com; \
      script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://apis.google.com https://www.gstatic.com https://www.google.com https://cdn.jsdelivr.net; \
      connect-src 'self' data: wss: https://api.stripe.com https://js.stripe.com https://firestore.googleapis.com https://firebasestorage.googleapis.com https://firebase.googleapis.com https://identitytoolkit.googleapis.com https://securetoken.googleapis.com https://api.openweathermap.org https://openweathermap.org; \
      frame-src 'self' https://js.stripe.com https://hooks.stripe.com https://www.google.com; \
      frame-ancestors 'self';" always;
  # When ready, switch to an enforced CSP. Example (adjust to your domains and third-parties):
  # add_header Content-Security-Policy "default-src 'self'; \
  #   img-src 'self' data: blob: https:; \
  #   media-src 'self' data: blob: https:; \
  #   style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; \
  #   font-src 'self' data: https://fonts.gstatic.com; \
  #   script-src 'self' 'unsafe-inline' https://js.stripe.com https://www.gstatic.com https://www.googletagmanager.com; \
  #   connect-src 'self' https://api.yourdomain.com https://firestore.googleapis.com https://firebasestorage.googleapis.com https://js.stripe.com https://api.stripe.com; \
  #   frame-src 'self' https://js.stripe.com https://hooks.stripe.com; \
  #   frame-ancestors 'self'" always;

    # Serve static build directly if present (optional)
    location /app/static/ {
      alias /usr/share/nginx/html/static/;
      access_log off;
      expires 30d;
      add_header Cache-Control "public";
    }

    # Proxy SPA and all other app pages to Flask (which serves /app SPA and API routes)
    location /app/ {
      proxy_pass http://flask_upstream;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 75s;
      # SPA deep-link fallback when Flask serves static build: try files then index
      # Uncomment if serving the React build directly from Nginx under /app/ instead of Flask
      # try_files $uri $uri/ /app/index.html;
    }

  # Backend APIs exposed by Node
    location /api/ {
      proxy_pass http://node_upstream;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      # CORS preflight support (adjust origins in upstream if needed)
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With';
        return 204;
      }
    }

    # File uploads and generated assets served by Flask
    location /uploads/ {
      proxy_pass http://flask_upstream;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Root redirects to SPA via Flask
    location = / {
      return 302 /app/dashboard;
    }
  }
}
